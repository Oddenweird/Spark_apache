# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dswDWhzpemrakw118XHiIeg3CZvZYU5O
"""

from pyspark import SparkContext

sc = SparkContext("local", "Longest Ordered Sequence")
data = [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 16, 20]
rdd = sc.parallelize(data)

# Функция для нахождения самой длинной последовательности упорядоченных чисел
def longest_ordered_sequence(rdd):

    sorted_rdd = rdd.sortBy(lambda x: x)


    max_length = 0
    current_length = 1
    longest_sequence = []
    current_sequence = []

    sorted_numbers = sorted_rdd.collect()

    for i in range(len(sorted_numbers)):
        if i == 0:
            current_sequence.append(sorted_numbers[i])
        elif sorted_numbers[i] == sorted_numbers[i - 1] + 1:
            current_sequence.append(sorted_numbers[i])
            current_length += 1
        else:
            # Проверка, является ли текущая последовательность самой длинной
            if current_length > max_length:
                max_length = current_length
                longest_sequence = current_sequence.copy()
            # Сброс текущей последовательности
            current_sequence = [sorted_numbers[i]]
            current_length = 1
    if current_length > max_length:
        longest_sequence = current_sequence

    return longest_sequence

result = longest_ordered_sequence(rdd)
print("Самая длинная последовательность упорядоченных чисел в РДД:", result)
sc.stop()

sc.stop()